calculate_food_consumption_in_state = { #By default 100k people eat one food per month. Can be modified by some species (eg Paluush).
	if = {
		limit = {
			NOT = {
				check_variable = { species = 5 } #Nekeoxes do not eat regular food
			}
		}
		set_variable = { state_food_consumption = state_population_k }
		divide_variable = { state_food_consumption = 100 }
		round_variable = state_food_consumption
	}
}

calculate_food_production_in_state = {
	set_variable = { state_food_production = resource@food }
}

calculate_total_food_consumption = {
	set_variable = { country_food_consumption = 0 }
	set_variable = { country_food_production = 0 }
	every_controlled_state = { #Fetch how much food each state eats.
		calculate_food_consumption_in_state = yes
		calculate_food_production_in_state = yes
		ROOT = { add_to_variable = { country_food_consumption = PREV.state_food_consumption } }
		ROOT = { add_to_variable = { country_food_production = PREV.state_food_production } }
	}
	set_variable = { country_food_consumption_modifier = country_food_consumption }
	multiply_variable = { country_food_consumption_modifier = -1 }
	set_temp_variable = { negate_exacavation_tech_food = modifier@local_resources_factor } #This is to undo the effects of excavation techs.
	add_to_temp_variable = { negate_exacavation_tech_food = 1 } #The resource modifier is gonna be something like 0.2 (if you have +20%) so I add 1 to get a proper percentage.
	divide_variable = { country_food_consumption_modifier = negate_exacavation_tech_food }
	round_variable = country_food_consumption_modifier
}

#Stab/WS hit from noncore states to encourage puppeting
calculate_stab_ws_hit_from_noncore = {
	set_variable = { stab_from_noncore = 0 }
	set_variable = { ws_from_noncore = 0 }
	every_owned_state = {
		if = { #All noncore states remove 1% from WS and STAB
			limit = { NOT = { is_core_of = ROOT } }
			ROOT = {
				subtract_from_variable = { stab_from_noncore = 0.01 }
				subtract_from_variable = { ws_from_noncore = 0.01 }
			}
			if = { #Claims negate the hit a bit
				limit = { is_claimed_by = ROOT }
				ROOT = {
					add_to_variable = { stab_from_noncore = 0.005 }
					add_to_variable = { ws_from_noncore = 0.005 }
				}
			}
		}
	}
	set_variable = { stab_from_noncore_display = stab_from_noncore }
	multiply_variable = { stab_from_noncore_display = -100 }
	set_variable = { ws_from_noncore_display = ws_from_noncore }
	multiply_variable = { ws_from_noncore_display = -100 }
}

calculate_combat_casualties = {
	#Get thousands of casualties and divide by 1000 for millions
	if = {
		limit = { casualties_k > 0 }
		set_temp_variable = { lok_country_combat_deaths_last_week = casualties_k } #Get total casualties
		#divide_temp_variable = { lok_country_combat_deaths_last_week = 1000 } #Turn to millions
		subtract_from_temp_variable = { lok_country_combat_deaths_last_week = lok_country_combat_deaths } #Remove those that we have already counted
		clamp_temp_variable = { var = lok_country_combat_deaths_last_week min = 0 } #Avoid negative casualties if something goes wrong
		round_temp_variable = lok_country_combat_deaths_last_week

		#Add that to the various trackers
		add_to_variable = { lok_country_combat_deaths = lok_country_combat_deaths_last_week } #Add the difference to the current total, getting the current total country combat deaths
		add_to_variable = { lok_country_deaths = lok_country_combat_deaths_last_week } #Also add it to the grand total
		add_to_variable = { global.lok_global_combat_deaths = lok_country_combat_deaths_last_week } #Add the last week difference to the global combat counter as well
		add_to_variable = { global.lok_global_deaths = lok_country_combat_deaths_last_week } #Add the last week difference to the global counter as well
	
		set_variable = { lok_country_combat_deaths_last_week_2 = lok_country_combat_deaths_last_week }

		#Depopulate states with these losses
		if = {
			limit = { check_variable = { lok_country_combat_deaths_last_week_2 > 0 } }
			multiply_variable = { lok_country_combat_deaths_last_week_2 = 1000 }
			# #Overall, 90% of casualties will come from cores, 10% will come from noncore. Approximation but good enough for now.
			# set_temp_variable = { lok_core_combat_deaths = lok_country_combat_deaths_last_week }
			# multiply_temp_variable = { lok_core_combat_deaths = 0.90 }
			# set_temp_variable = { lok_num_core_states = 0 }
			# every_controlled_state = { #Count core states
			# 	limit = { is_core_of = ROOT }
			# 	PREV = { add_to_temp_variable = { lok_num_core_states = 1 } }
			# }
			# divide_temp_variable = { lok_core_combat_deaths = lok_num_core_states } #The amount of deaths in each state more or less
			every_controlled_state = {
				set_temp_variable = { lok_combat_deaths_percent_for_state = state_population_k }
				divide_temp_variable = { lok_combat_deaths_percent_for_state = ROOT.max_manpower_k }
				clamp_temp_variable = {
					var = lok_combat_deaths_percent_for_state
					min = 0.001
				}
				set_temp_variable = { lok_combat_deaths_to_be_removed_for_state = ROOT.lok_country_combat_deaths_last_week_2 }
				multiply_temp_variable = { lok_combat_deaths_to_be_removed_for_state = lok_combat_deaths_percent_for_state }
				round_temp_variable = lok_combat_deaths_to_be_removed_for_state

				multiply_temp_variable = { lok_combat_deaths_to_be_removed_for_state = -1 }
				add_manpower = lok_combat_deaths_to_be_removed_for_state

				divide_temp_variable = { lok_combat_deaths_to_be_removed_for_state = -1000 }
				add_to_variable = { lok_state_combat_deaths = lok_combat_deaths_to_be_removed_for_state }
				add_to_variable = { lok_state_deaths = lok_combat_deaths_to_be_removed_for_state }
				set_variable = { lok_state_deaths_display = lok_state_deaths }
				round_variable = lok_state_deaths_display
			}
		}
	}
}